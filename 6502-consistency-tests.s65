                .include "./submodules/beeb/include/beeb.s65"
                .include "lib.s65"

;-------------------------------------------------------------------------

; as far is I can tell, BBC BASIC doesn't actually use zp past $4f. So
; starting at $60 should be fairly safe.
*=$60
zp_bss_start:
                .dsection zp_bss
zp_bss_end:
                .dsection zp_lib
                .cerror *>$90,'zp overflow'

                ; start high to accommodate BASIC driver (can also be
                ; *RUN in Mode 7)
*=$4000
                .dsection code
                .dsection code_lib
                .cerror *>$7c00,'code overflow'

;-------------------------------------------------------------------------

                .section zp_bss
state_begin:
input_a: .fill 1
input_x: .fill 1
input_y: .fill 1
input_s: .fill 1
input_p: .fill 1
input_operand: .fill 1
operand: .fill 1
crcs_begin:
                ; order must match the names text
crc_a: .fill 2
crc_x: .fill 2
crc_y: .fill 2
crc_s: .fill 2
crc_operand: .fill 2
crc_n: .fill 2
crc_v: .fill 2
crc_u: .fill 2
crc_b: .fill 2
crc_d: .fill 2
crc_i: .fill 2
crc_z: .fill 2
crc_c: .fill 2
crcs_end:
                .cerror (crcs_end-crcs_begin)%2!=0,""
num_crcs=(crcs_end-crcs_begin)/2
buf_n: .fill 1
buf_v: .fill 1
buf_u: .fill 1
buf_b: .fill 1
buf_d: .fill 1
buf_i: .fill 1
buf_z: .fill 1
buf_c: .fill 1
state_end:
                .endsection zp_bss

;-------------------------------------------------------------------------

CRCByte: .macro addr
                eor \addr+1
                .rept 8
                .block
                asl \addr+0
                rol a
                bcc clear
                sta reload_a+1;tay
                lda \addr+0
                eor #$21
                sta \addr+0
reload_a: lda #$ff;tya
                eor #$10
clear:
                .endblock
                .endrept
                sta \addr+1
                .endmacro
                
;-------------------------------------------------------------------------

                .section code
                rts

                ; INF%!0 - routine to call to check CPU
                .dword check_cpu

                ; INF%?4 - number of CRCs recorded
                .byte num_crcs

                ; $(INF%!5) - names of CRCs
                .dword names

                ; INF%!9 - address of CRCs once test has run
                .dword crcs_begin

                ; INF%!13 - test routine
                .dword test

;-------------------------------------------------------------------------

check_cpu:
                lda $fffe
                sta $fffe
                jsr is_65c02
                bcc +
                brk
                .text 255,'Requires NMOS 6502',0
+
                rts
                
;-------------------------------------------------------------------------

test:
                sei
                tsx
                stx old_s
                ldx #0
-
                lda $0100,x
                sta old_stack,x
                inx
                bne -
                cli
                
                ldx #state_end-state_begin
                lda #0
-
                sta state_begin,x
                dex
                bpl -

                lda #1
                sta buf_c

                lda #$ff
                sta input_s

                clc
                clv
                cld
                cli
                lda #0
                php
                pla
                sta input_p
                
loop:
                lda input_operand
                sta operand
                ldx input_s
                txs
                lda input_p
                pha
                lda input_a
                ldx input_x
                ldy input_y
                plp
                
                las operand,y

                php

                #CRCByte crc_a
                
                pla             ;restore P
                asl a
                rol buf_n
                asl a
                rol buf_v
                asl a
                rol buf_u
                asl a
                rol buf_b
                asl a
                rol buf_d
                asl a
                rol buf_i
                asl a
                rol buf_z
                asl a
                rol buf_c
                bcc p_buf_done

                lda buf_n
                #CRCByte crc_n
                lda buf_v
                #CRCByte crc_v
                lda buf_u
                #CRCByte crc_u
                lda buf_b
                #CRCByte crc_b
                lda buf_d
                #CRCByte crc_d
                lda buf_i
                #CRCByte crc_i
                lda buf_z
                #CRCByte crc_z
                lda buf_c
                #CRCByte crc_c

                lda #1
                sta buf_c

p_buf_done:

                txa
                #CRCByte crc_x
                tya
                #CRCByte crc_y
                tsx
                txa
                #CRCByte crc_s
                lda operand
                #CRCByte crc_operand

                inc input_operand
                bne loop

                ; oswrch does a bunch of lda $103,x (etc.), which
                ; doesn't work if the stack wraps...
                ldx #$ff
                txs

                bit $ff
                bmi exit
                
                lda input_s
                eor #$ff
                jsr print_hex
                lda #8
                jsr oswrch
                jsr oswrch
                ldx input_s
                inx
                stx input_s
                cpx #$ff
                bne loop

exit:
                sei
                ldx #0
-
                lda old_stack,x
                sta $0100,x
                inx
                bne -
                ldx old_s
                txs
                cli
                
                rts

;                 ldx #0
; compare_crcs_loop:
;                 bit got_previous_crcs
;                 bpl update_previous_crcs

;                 lda crcs_begin+0,x
;                 cmp previous_crcs+0,x
;                 bne crcs_differ
;                 lda crcs_begin+1,x
;                 cmp previous_crcs+1,x
;                 beq update_previous_crcs

; crcs_differ:
;                 inc inconsistency_counters+0,x
;                 bne +
;                 inc inconsistency_counters+1,x
; +

; update_previous_crcs:
;                 lda crcs_begin+0,x
;                 sta previous_crcs+0,x
;                 lda crcs_begin+1,x
;                 sta previous_crcs+1,x

;                 inx
;                 inx
;                 cpx #crcs_end-crcs_begin
;                 bne compare_crcs_loop

;                 lda #$80
;                 sta got_previous_crcs
                
;                 jmp test

names: .text "AXYSONVUBDIZC"
                .cerror size(names)!=num_crcs,""
                .byte 13
                
;-------------------------------------------------------------------------

old_stack: .fill 256
old_s: .fill 1
                
;-------------------------------------------------------------------------

                
                .endsection code